function eqm = Model_Bellman(p, np, func, eqm)



  % coef_l = eqm.v(1,end) / (np.q(end)^(p.sigma - 1));
  % coef_h = eqm.v(2,end) / (np.q(end)^(p.sigma - 1));
  % eqm.v_interp_l = @(q) (q > max(np.q)) .* coef_l .* q.^(p.sigma - 1) + ...
  %     (q >= min(np.q) & q <= max(np.q)) .* interp1(np.q, eqm.v(1,:), q, 'linear', 'extrap'); % outside is set  for convergence of calE
  % eqm.v_interp_h = @(q) (q > max(np.q)) .* coef_h .* q.^(p.sigma - 1) + ...
  %     (q >= min(np.q) & q <= max(np.q)) .* interp1(np.q, eqm.v(2,:), q, 'linear', 'extrap'); % outside is set  for convergence of calE

  eqm.v_interp_l = @(q) interp1(np.q, eqm.v(1,:), q, 'linear', 'extrap'); % outside is set  for convergence of calE
  eqm.v_interp_h = @(q) interp1(np.q, eqm.v(2,:), q, 'linear', 'extrap'); % outside is set  for convergence of calE

  eqm.v_qy_gp1_fY_interp_l = @(q) integral(   @(y) eqm.v_interp_l(q .* y /(1+eqm.g))  .* p.theta./ y.^(p.theta+1), 1, Inf);
  eqm.v_qy_gp1_fY_interp_h = @(q) integral(   @(y) eqm.v_interp_h(q .* y /(1+eqm.g))  .* p.theta./ y.^(p.theta+1), 1, Inf);
  eqm.v_q_gp1_interp_l     = @(q) eqm.v_interp_l(q  /(1+eqm.g));
  eqm.v_q_gp1_interp_h     = @(q) eqm.v_interp_h(q  /(1+eqm.g));
  % eqm.v_l_qx_gp1_fX_omega_l_integral =integral( @(q) integral(   @(x) eqm.v_interp_l(q * x /(1+eqm.g)) .* eqm.omega_interp_l(q)    .* p.theta * p.alpha^(p.theta) ./ x.^(p.theta+1), p.alpha, Inf), np.q_min, Inf);
  % eqm.v_l_qx_gp1_fX_omega_h_integral =integral( @(q) integral(   @(x) eqm.v_interp_l(q * x /(1+eqm.g)) .* eqm.omega_interp_h(q)    .* p.theta * p.alpha^(p.theta) ./ x.^(p.theta+1), p.alpha, Inf), np.q_min, Inf);
  % eqm.v_h_qx_gp1_fX_omega_l_integral =integral( @(q) integral(   @(x) eqm.v_interp_h(q * x /(1+eqm.g)) .* eqm.omega_interp_l(q)    .* p.theta * p.alpha^(p.theta) ./ x.^(p.theta+1), p.alpha, Inf), np.q_min, Inf);
  % eqm.v_h_qx_gp1_fX_omega_h_integral =integral( @(q) integral(   @(x) eqm.v_interp_h(q * x /(1+eqm.g)) .* eqm.omega_interp_h(q)    .* p.theta * p.alpha^(p.theta) ./ x.^(p.theta+1), p.alpha, Inf), np.q_min, Inf);


coef_l = eqm.omega(1,end) / eqm.s(1) / (np.q(end)^(-p.theta - 1));
coef_h = eqm.omega(2,end) / eqm.s(2) / (np.q(end)^(-p.theta - 1));
eqm.omega_interp_l = @(q) (q > max(np.q)) .* coef_l .* q.^(-p.theta-1) + ...
    (q >= min(np.q) & q <= max(np.q)) .* max(0, interp1(np.q, eqm.omega(1,:), q, 'spline', 'extrap'));
eqm.omega_interp_h = @(q) (q >max(np.q)) .* coef_h .* q.^(-p.theta-1) + ...
    (q >= min(np.q) & q <= max(np.q)) .* max(0, interp1(np.q, eqm.omega(2,:), q, 'spline', 'extrap'));

    % eqm.v_l_qx_gp1_fX_omega_l_integral = integral(@(q) ...
    %   arrayfun(@(q_scalar) integral(@(x) ...
    %       eqm.v_interp_l(q_scalar .* x / (1 + eqm.g)) .* eqm.omega_interp_l(q_scalar) ...
    %       .* p.theta * p.alpha^(p.theta) ./ x.^(p.theta + 1), p.alpha, Inf), q), np.q_min, Inf);        
    % eqm.v_l_qx_gp1_fX_omega_h_integral = integral(@(q) ...
    %   arrayfun(@(q_scalar) integral(@(x) ...
    %       eqm.v_interp_l(q_scalar .* x / (1 + eqm.g)) .* arrayfun(eqm.omega_interp_h, q_scalar) ...
    %       .* p.theta * p.alpha^(p.theta) ./ x.^(p.theta + 1), p.alpha, Inf), q), np.q_min, Inf);
    % eqm.v_h_qx_gp1_fX_omega_l_integral = integral(@(q) ...
    %   arrayfun(@(q_scalar) integral(@(x) ...
    %       eqm.v_interp_h(q_scalar .* x / (1 + eqm.g)) .* arrayfun(eqm.omega_interp_l, q_scalar) ...
    %       .* p.theta * p.alpha^(p.theta) ./ x.^(p.theta + 1), p.alpha, Inf), q), np.q_min, Inf);
    % eqm.v_h_qx_gp1_fX_omega_h_integral = integral(@(q) ...
    %   arrayfun(@(q_scalar) integral(@(x) ...
    %       eqm.v_interp_h(q_scalar .* x / (1 + eqm.g)) .* arrayfun(eqm.omega_interp_h, q_scalar) ...
    %       .* p.theta * p.alpha^(p.theta) ./ x.^(p.theta + 1), p.alpha, Inf), q), np.q_min, Inf);
  

    eqm.v_l_qx_gp1_fX_omega_l_integral = integral(@(q) ...
    arrayfun(@(q_scalar) integral(@(x) ...
        eqm.v_interp_l(q_scalar .* x / (1 + eqm.g)) .* eqm.omega_interp_l(q_scalar) ...
        .* p.theta * p.alpha^(p.theta) ./ x.^(p.theta + 1), p.alpha, Inf), q), np.q_min,  4 * np.q_max);        
  eqm.v_l_qx_gp1_fX_omega_h_integral = integral(@(q) ...
    arrayfun(@(q_scalar) integral(@(x) ...
        eqm.v_interp_l(q_scalar .* x / (1 + eqm.g)) .* arrayfun(eqm.omega_interp_h, q_scalar) ...
        .* p.theta * p.alpha^(p.theta) ./ x.^(p.theta + 1), p.alpha, Inf), q), np.q_min,  4 *  np.q_max);           
  eqm.v_h_qx_gp1_fX_omega_l_integral = integral(@(q) ...
    arrayfun(@(q_scalar) integral(@(x) ...
        eqm.v_interp_h(q_scalar .* x / (1 + eqm.g)) .* arrayfun(eqm.omega_interp_l, q_scalar) ...
        .* p.theta * p.alpha^(p.theta) ./ x.^(p.theta + 1), p.alpha, Inf), q), np.q_min,  4 *  np.q_max);            
  eqm.v_h_qx_gp1_fX_omega_h_integral = integral(@(q) ...
    arrayfun(@(q_scalar) integral(@(x) ...
        eqm.v_interp_h(q_scalar .* x / (1 + eqm.g)) .* arrayfun(eqm.omega_interp_h, q_scalar) ...
        .* p.theta * p.alpha^(p.theta) ./ x.^(p.theta + 1), p.alpha, Inf), q), np.q_min,  4 *  np.q_max);             
        
    eqm.bellman_constant = (1+eqm.g) * (1-p.gamma) / (1+p.r);


  FOC_lambda_RHS = zeros(2, np.q_num); % Initialize FOC_lambda_RHS
  FOC_delta_RHS = zeros(2, np.q_num); % Initialize FOC_delta_RHS
  FOC_lambda_RHS(1,:) = eqm.bellman_constant * eqm.nu_hat(1) * ( arrayfun(eqm.v_qy_gp1_fY_interp_l, np.q) - arrayfun(eqm.v_q_gp1_interp_l, np.q) );
  FOC_lambda_RHS(2,:) = eqm.bellman_constant * eqm.nu_hat(2) * ( arrayfun(eqm.v_qy_gp1_fY_interp_h, np.q) - arrayfun(eqm.v_q_gp1_interp_h, np.q) );
  eqm.lambda(1,:)     = FOC_lambda_RHS(1,:)./ eqm.v(1,:).^p.epsilon;
  eqm.lambda(2,:)     = FOC_lambda_RHS(2,:)./ eqm.v(2,:).^p.epsilon;
  eqm.lambda          = max(min(1, eqm.lambda), 0);
  eqm.lambda          = eqm.lambda.^(1/p.beta);

  FOC_delta_RHS(1,:) = eqm.bellman_constant *( eqm.s(1) * func.P_X(p, p.phi(1)/p.phi(1)) * eqm.v_l_qx_gp1_fX_omega_l_integral ...
                                              + eqm.s(2) * func.P_X(p, p.phi(1)/p.phi(2)) * eqm.v_l_qx_gp1_fX_omega_h_integral);
  FOC_delta_RHS(2,:) = eqm.bellman_constant *( eqm.s(2) * func.P_X(p, p.phi(2)/p.phi(2)) * eqm.v_h_qx_gp1_fX_omega_h_integral ...
                                              + eqm.s(1) * func.P_X(p, p.phi(2)/p.phi(1)) * eqm.v_h_qx_gp1_fX_omega_l_integral);
  eqm.delta(1,:)     = FOC_delta_RHS(1,:)./ eqm.v(1,:).^p.epsilon;
  eqm.delta(2,:)     = FOC_delta_RHS(2,:)./ eqm.v(2,:).^p.epsilon;
  eqm.delta          = eqm.delta.^(1/p.beta);
  eqm.delta          = max(min(1, eqm.delta), 0);


  Bellman_RHS = zeros(2, np.q_num);
  Bellman_RHS(1, :) = p.pi(1) * np.q.^(p.sigma-1) ...
                      - eqm.lambda(1,:).^(p.beta+1) .* eqm.v(1,:).^(p.epsilon)/ (1 + p.beta) ...
                      - eqm.delta(1,:).^(p.beta+1) .* eqm.v(1,:).^(p.epsilon)/ (1 + p.beta) ...
                      + eqm.bellman_constant * ( eqm.lambda(1, :) .* eqm.nu_hat(1) .* arrayfun(eqm.v_qy_gp1_fY_interp_l, np.q) ...
                                                + (1 - eqm.lambda(1, :)) .* eqm.nu_hat(1) .* arrayfun(eqm.v_q_gp1_interp_l, np.q) ...
                                                  + eqm.s(1) .* eqm.delta(1, :) .* func.P_X(p, p.phi(1)/p.phi(1)) .* eqm.v_l_qx_gp1_fX_omega_l_integral ...
                                                  + eqm.s(2) .* eqm.delta(1, :) .* func.P_X(p, p.phi(1)/p.phi(2)) .* eqm.v_l_qx_gp1_fX_omega_h_integral );
  Bellman_RHS(2, :) = p.pi(2) * np.q.^(p.sigma-1) ...
                      - eqm.lambda(2,:).^(p.beta+1) .* eqm.v(2,:).^(p.epsilon)/ (1 + p.beta) ...
                      - eqm.delta(2,:).^(p.beta+1) .* eqm.v(2,:).^(p.epsilon)/ (1 + p.beta) ...
                      + eqm.bellman_constant * ( eqm.lambda(2, :) .* eqm.nu_hat(2) .* arrayfun(eqm.v_qy_gp1_fY_interp_h, np.q) ...
                                                + (1 - eqm.lambda(2, :)) .* eqm.nu_hat(2) .* arrayfun(eqm.v_q_gp1_interp_h, np.q) ...
                                                  + eqm.s(2) .* eqm.delta(2, :) .* func.P_X(p, p.phi(2)/p.phi(2)) .* eqm.v_h_qx_gp1_fX_omega_h_integral ...
                                                  + eqm.s(1) .* eqm.delta(2, :) .* func.P_X(p, p.phi(2)/p.phi(1)) .* eqm.v_h_qx_gp1_fX_omega_l_integral );

  eqm.v(1,:) = Bellman_RHS(1, :);
  eqm.v(2,:) = Bellman_RHS(2, :);


end 